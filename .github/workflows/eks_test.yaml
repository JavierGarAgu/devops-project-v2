name: test runner eks access

# trigger manually
on:
  workflow_dispatch:

jobs:
  test-eks:
    # self-hosted eks arc runner
    runs-on: [self-hosted]

    steps:
      # checkout the repository to the runner (no mandatory)
      - name: checkout repo
        uses: actions/checkout@v4

      # install aws cli v2 if is necessary
      - name: install aws cli
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      # configure aws credentials using secrets
      - name: set up aws cli
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      # configure kubectl to talk to the eks cluster
      - name: configure kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name private-eks \
            --region eu-north-1

      # check eks nodes status
      - name: check nodes
        run: kubectl get nodes -o wide

      # check system pods in kube-system namespace
      - name: check system pods
        run: kubectl get pods -n kube-system

      # create a namespace for testing, ignore if it already exists
      - name: create test namespace
        run: kubectl create namespace gha-test || echo "namespace exists"

      # deploy a simple nginx pod in the test namespace
      - name: deploy a test pod
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Pod
          metadata:
            name: gha-test-pod
            namespace: gha-test
          spec:
            containers:
            - name: nginx
              image: nginx:1.21
              ports:
              - containerPort: 80
          EOF

      # wait until the pod is ready, timeout after 120s
      - name: wait for pod to be ready
        run: kubectl wait --for=condition=Ready pod/gha-test-pod -n gha-test --timeout=120s

      # show pod status including node info
      - name: show test pod status
        run: kubectl get pod gha-test-pod -n gha-test -o wide

      # cleanup test resources runs even if previous steps fail
      - name: cleanup test resources
        if: always()
        run: |
          kubectl delete pod gha-test-pod -n gha-test --ignore-not-found
          kubectl delete namespace gha-test --ignore-not-found
