FROM amazonlinux:2023

ARG TARGETPLATFORM
ARG RUNNER_VERSION
ARG RUNNER_CONTAINER_HOOKS_VERSION
ARG CHANNEL=stable
ARG DOCKER_VERSION=24.0.7
ARG DOCKER_COMPOSE_VERSION=v2.23.0
ARG DUMB_INIT_VERSION=1.2.5
ARG RUNNER_UID=1000
ARG DOCKER_GID=1001

ENV RUNNER_TOOL_CACHE=/opt/hostedtoolcache
ENV RUNNER_ASSETS_DIR=/runnertmp
ENV HOME=/home/runner
ENV PATH="${PATH}:${HOME}/.local/bin/"
ENV ImageOS=amazonlinux2023

# Install basic tools, git, curl, python3, etc.
RUN dnf update -y \
    && dnf install -y \
        libicu \
        git \
        jq \
        tar \
        unzip \
        gzip \
        wget \
        sudo \
        shadow-utils \
        which \
        python3 \
        python3-pip \
        make \
        gcc \
        libyaml \
        unzip \
        zip \
        bzip2 \
        sudo \
        iproute \
        net-tools \
        hostname \
        iputils \
        procps-ng \
        which \
        && alternatives --install /usr/bin/python python /usr/bin/python3 1 \
        && alternatives --install /usr/bin/pip pip /usr/bin/pip3 1 \
        && dnf clean all

# Add runner user and docker group
RUN groupadd -g $DOCKER_GID docker \
    && useradd -m -u $RUNNER_UID -G docker,wheel runner \
    && echo "%wheel   ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers \
    && echo "Defaults env_keep += \"HOME PATH\"" >> /etc/sudoers

# Install dumb-init
RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \
    && if [ "$ARCH" = "arm64" ]; then ARCH=aarch64; fi \
    && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "x86_64" ]; then ARCH=x86_64; fi \
    && curl -fLo /usr/bin/dumb-init https://github.com/Yelp/dumb-init/releases/download/v${DUMB_INIT_VERSION}/dumb-init_${DUMB_INIT_VERSION}_${ARCH} \
    && chmod +x /usr/bin/dumb-init

# Create directories
RUN mkdir -p "$RUNNER_ASSETS_DIR" "$RUNNER_TOOL_CACHE" \
    && chgrp docker "$RUNNER_TOOL_CACHE" \
    && chmod g+rwx "$RUNNER_TOOL_CACHE"

# Install GitHub Runner
RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \
    && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "x86_64" ]; then ARCH=x64; fi \
    && cd "$RUNNER_ASSETS_DIR" \
    && curl -fLo runner.tar.gz https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${ARCH}-${RUNNER_VERSION}.tar.gz \
    && tar xzf runner.tar.gz \
    && rm runner.tar.gz
#    && ./bin/installdependencies.sh

# Install runner container hooks
RUN cd "$RUNNER_ASSETS_DIR" \
    && curl -fLo runner-container-hooks.zip https://github.com/actions/runner-container-hooks/releases/download/v${RUNNER_CONTAINER_HOOKS_VERSION}/actions-runner-hooks-k8s-${RUNNER_CONTAINER_HOOKS_VERSION}.zip \
    && unzip runner-container-hooks.zip -d ./k8s \
    && rm runner-container-hooks.zip

# Install Docker CLI
RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \
    && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "x86_64" ]; then ARCH=x86_64; fi \
    && curl -fLo docker.tgz https://download.docker.com/linux/static/${CHANNEL}/${ARCH}/docker-${DOCKER_VERSION}.tgz \
    && tar zxvf docker.tgz \
    && install -o root -g root -m 755 docker/docker /usr/bin/docker \
    && rm -rf docker docker.tgz

# Install Docker Compose CLI plugin
RUN ARCH=$(echo ${TARGETPLATFORM} | cut -d / -f2) \
    && if [ "$ARCH" = "amd64" ] || [ "$ARCH" = "x86_64" ]; then ARCH=x86_64; fi \
    && mkdir -p /usr/libexec/docker/cli-plugins \
    && curl -fLo /usr/libexec/docker/cli-plugins/docker-compose https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-linux-${ARCH} \
    && chmod +x /usr/libexec/docker/cli-plugins/docker-compose \
    && ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/bin/docker-compose \
    && docker compose version

# Copy scripts and hooks
COPY entrypoint.sh startup.sh logger.sh graceful-stop.sh update-status /usr/bin/
COPY docker-shim.sh /usr/local/bin/docker
COPY hooks /etc/arc/hooks/

# Copy installer and RPMs to /tmp
COPY rpminstaller.sh rpms.tar.gz /tmp/

# Install all the tools needed for the operations
RUN tar -xzvf /tmp/rpms.tar.gz -C /tmp/ \
    && chmod +x /tmp/rpminstaller.sh \
    && /tmp/rpminstaller.sh \
    && rm -rf /tmp/rpms.tar.gz /tmp/rpminstaller.sh /tmp/rpms

USER runner
ENTRYPOINT ["/bin/bash", "-c"]
CMD ["entrypoint.sh"]
